using System.Collections;
using UnityEngine;


public class Player : MonoBehaviour
{
    [SerializeField] private GameController gameController;
    [SerializeField] private float speed;
    [SerializeField] private float jumpHight;

    private Rigidbody2D rb;
    private Animator animator;

    private bool grounded = true;
    private bool wasRunning;
    private bool isDead;

    public bool useKeyBoard;

    public float Speed { get => speed; }

    void Start()
    {
        rb = GetComponent<Rigidbody2D>();
        animator = GetComponent<Animator>();
    }

    void Update()
    {
        if(isDead) { return; }

        if (useKeyBoard)
        {
            float direction = Input.GetAxis("Horizontal");

            Move(direction);

            if (Input.GetKeyDown(KeyCode.Space) && grounded)
            {
                Jump();
            }
        }
    }

    public void Jump()
    {
        AnimateJump();

        rb.velocity = new Vector2(0, jumpHight);
    }

    private void AnimateJump()
    {
        animator.SetTrigger("StopAction");
        animator.ResetTrigger("StopAction");
        animator.SetTrigger("Jump");
    }

    private void OnCollisionEnter2D(Collision2D collision)
    {
        if (collision.gameObject.tag == "Ground")
        {
            if (!grounded)
            {
                animator.ResetTrigger("Jump");
                animator.SetTrigger("Landing");
            }

            grounded = true;
        }
    }

    private void OnCollisionExit2D(Collision2D collision)
    {
        grounded = false;

        AnimateJump();
    }

    public void Move(float direction)
    {
        wasRunning = direction != 0;

        animator.SetBool("Run", grounded && wasRunning);

        if (!wasRunning) { return; }

        if (direction > 0)
        {
            GetComponent<SpriteRenderer>().flipX = false;
        }
        else if (direction < 0)
        {
           GetComponent<SpriteRenderer>().flipX = true;
        }

        float step = speed * direction;

        rb.velocity = new Vector2(step, rb.velocity.y);

    }

    public void StopMoving()
    {
        StartCoroutine(StopRoutine());
    }

    private IEnumerator StopRoutine()
    {
        float lastDir = rb.velocity.x;
        float stopDir = lastDir > 0 ? 0.1f : -0.1f;

        Move(stopDir);

        yield return new WaitForSeconds(0.1f);

        Move(0);
    }

    public void Dead()
    {
        if (isDead) { return; }

        isDead = true;
        animator.SetBool("Run", false);

        animator.SetTrigger("StopAction");
        animator.SetInteger("Hurt", 1);

        gameController.LoseGame();
    }
}
